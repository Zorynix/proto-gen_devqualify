syntax = "proto3";

package analytics.v1;
import "google/protobuf/timestamp.proto";

option go_package = "diploma.analytics.v1;analyticsv1";

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  BACKEND = 1;
  FRONTEND = 2;
  DEVOPS = 3;
  DATA_SCIENCE = 4;
}

enum Level {
  LEVEL_UNSPECIFIED = 0;
  JUNIOR = 1;
  MIDDLE = 2;
  SENIOR = 3;
}

enum ReportType {
  REPORT_TYPE_UNSPECIFIED = 0;
  SUMMARY = 1;
  DETAILED = 2;
  USER_PROGRESS = 3;
  PLATFORM_METRICS = 4;
  TEST_QUALITY = 5;
}

enum TimeFrame {
  TIME_FRAME_UNSPECIFIED = 0;
  DAILY = 1;
  WEEKLY = 2;
  MONTHLY = 3;
  QUARTERLY = 4;
  YEARLY = 5;
  CUSTOM = 6;
}

message TimestampRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

message Pagination {
  int32 page_size = 1;
  string page_token = 2;
}

service AnalyticsService {
  // Test Analytics
  rpc GetTestStatistics(GetTestStatisticsRequest) returns (GetTestStatisticsResponse);
  rpc GetTestPerformanceTrend(GetTestPerformanceTrendRequest) returns (GetTestPerformanceTrendResponse);
  rpc GetQuestionDifficultyAnalysis(GetQuestionDifficultyAnalysisRequest) returns (GetQuestionDifficultyAnalysisResponse);
  
  // User Analytics
  rpc GetUserStatistics(GetUserStatisticsRequest) returns (GetUserStatisticsResponse);
  rpc GetUserProgressReport(GetUserProgressReportRequest) returns (GetUserProgressReportResponse);
  rpc GetUserStrengthsWeaknesses(GetUserStrengthsWeaknessesRequest) returns (GetUserStrengthsWeaknessesResponse);
  rpc GetUserComparisonWithPeers(GetUserComparisonWithPeersRequest) returns (GetUserComparisonWithPeersResponse);
  
  // Platform Analytics
  rpc GetPlatformStatistics(GetPlatformStatisticsRequest) returns (GetPlatformStatisticsResponse);
  rpc GetCategoryPopularityStats(GetCategoryPopularityStatsRequest) returns (GetCategoryPopularityStatsResponse);
  rpc GetUserEngagementMetrics(GetUserEngagementMetricsRequest) returns (GetUserEngagementMetricsResponse);
  rpc GetActiveUsersStats(GetActiveUsersStatsRequest) returns (GetActiveUsersStatsResponse);
  
  // Reports
  rpc GenerateReport(GenerateReportRequest) returns (GenerateReportResponse);
  rpc ListReports(ListReportsRequest) returns (ListReportsResponse);
  rpc GetReport(GetReportRequest) returns (GetReportResponse);
  
  // Learning Recommendations
  rpc GetLearningPathRecommendations(GetLearningPathRecommendationsRequest) returns (GetLearningPathRecommendationsResponse);
  rpc GetTestRecommendations(GetTestRecommendationsRequest) returns (GetTestRecommendationsResponse);
}

// Test Analytics Messages
message GetTestStatisticsRequest {
  int64 test_id = 1;
  TimestampRange time_range = 2;
}

message GetTestStatisticsResponse {
  int32 total_attempts = 1;
  int32 completed_attempts = 2;
  double completion_rate = 3;
  double average_score = 4;
  double average_time_spent_seconds = 5;
  ScoreDistribution score_distribution = 6;
  repeated QuestionStats question_stats = 7;
}

message ScoreDistribution {
  int32 excellent_count = 1; // 90-100%
  int32 good_count = 2;      // 75-89%
  int32 average_count = 3;   // 50-74%
  int32 below_average_count = 4; // 25-49%
  int32 poor_count = 5;      // 0-24%
}

message QuestionStats {
  int64 question_id = 1;
  int32 attempts = 2;
  int32 correct_answers = 3;
  double success_rate = 4;
  double average_time_spent_seconds = 5;
  int32 points = 6;
}

message GetTestPerformanceTrendRequest {
  int64 test_id = 1;
  TimestampRange time_range = 2;
  TimeFrame time_frame = 3;
}

message GetTestPerformanceTrendResponse {
  repeated PerformanceDataPoint data_points = 1;
}

message PerformanceDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  double average_score = 2;
  int32 attempts = 3;
}

message GetQuestionDifficultyAnalysisRequest {
  int64 test_id = 1;
}

message GetQuestionDifficultyAnalysisResponse {
  repeated DifficultyAnalysis questions = 1;
}

message DifficultyAnalysis {
  int64 question_id = 1;
  string reasoning = 2;
  double discrimination_index = 3; // How well the question discriminates between high and low performers
}

// User Analytics Messages
message GetUserStatisticsRequest {
  int64 user_id = 1;
  TimestampRange time_range = 2;
  Direction direction = 3;
  Level level = 4;
}

message GetUserStatisticsResponse {
  int32 total_tests_taken = 1;
  int32 total_tests_completed = 2;
  double overall_average_score = 3;
  int32 total_points_earned = 4;
  int32 total_correct_answers = 5;
  int32 total_incorrect_answers = 6;
  double average_time_per_test_seconds = 7;
  repeated TestStats test_stats = 8;
}

message TestStats {
  int64 test_id = 1;
  string test_name = 2;
  int32 attempts = 3;
  double best_score = 4;
  double average_score = 5;
  google.protobuf.Timestamp last_attempt = 6;
  double improvement_rate = 7; // Improvement between first and last attempt
}

message GetUserProgressReportRequest {
  int64 user_id = 1;
  TimestampRange time_range = 2;
  Direction direction = 3;
  Level level = 4;
}

message GetUserProgressReportResponse {
  repeated ProgressDataPoint progress_data = 1;
  string trend_analysis = 2;
  double overall_improvement = 3;
}

message ProgressDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  double score = 2;
  int64 test_id = 3;
  string test_name = 4;
}

message GetUserStrengthsWeaknessesRequest {
  int64 user_id = 1;
  Direction direction = 2;
  Level level = 3;
}

message GetUserStrengthsWeaknessesResponse {
  repeated TopicStrength strengths = 1;
  repeated TopicWeakness weaknesses = 2;
  string recommendation = 3;
}

message TopicStrength {
  string topic = 1;
  double proficiency_percentage = 2;
  int32 questions_answered = 3;
  int32 correct_answers = 4;
}

message TopicWeakness {
  string topic = 1;
  double proficiency_percentage = 2;
  int32 questions_answered = 3;
  int32 correct_answers = 4;
  repeated int64 recommended_test_ids = 5;
}

message GetUserComparisonWithPeersRequest {
  int64 user_id = 1;
  Direction direction = 2;
  Level level = 3;
}

message GetUserComparisonWithPeersResponse {
  double user_percentile = 1; // User's position in percentile rank
  double peer_average_score = 2;
  double user_average_score = 3;
  repeated ComparisonMetric comparison_metrics = 4;
}

message ComparisonMetric {
  string metric_name = 1; // e.g., "Tests completed", "Avg score", etc.
  double user_value = 2;
  double peer_average = 3;
  double peer_top_10_percent = 4;
}

message GetPlatformStatisticsRequest {
  TimestampRange time_range = 1;
}

message GetPlatformStatisticsResponse {
  int32 total_users = 1;
  int32 total_tests_taken = 2;
  int32 total_tests_completed = 3;
  double platform_average_score = 4;
  int32 total_questions_answered = 5;
  double average_completion_time_seconds = 6;
  UsageStatistics usage_statistics = 7;
}

message UsageStatistics {
  int32 daily_active_users = 1;
  int32 weekly_active_users = 2;
  int32 monthly_active_users = 3;
  repeated UserRegistrationTrend user_trends = 4;
}

message UserRegistrationTrend {
  google.protobuf.Timestamp date = 1;
  int32 new_users = 2;
}

message GetCategoryPopularityStatsRequest {
  TimestampRange time_range = 1;
}

message GetCategoryPopularityStatsResponse {
  repeated CategoryStat categories = 1;
}

message CategoryStat {
  Direction direction = 1;
  Level level = 2;
  int32 test_attempts = 3;
  int32 unique_users = 4;
  double average_completion_rate = 5;
}

message GetUserEngagementMetricsRequest {
  TimestampRange time_range = 1;
  TimeFrame time_frame = 2;
}

message GetUserEngagementMetricsResponse {
  repeated EngagementMetric engagement_metrics = 1;
}

message EngagementMetric {
  google.protobuf.Timestamp timestamp = 1;
  double average_session_duration_minutes = 2;
  double tests_per_user = 3;
  double questions_per_session = 4;
  double return_rate = 5; // Percentage of users who returned within 7 days
}

message GetActiveUsersStatsRequest {
  TimestampRange time_range = 1;
  TimeFrame time_frame = 2;
}

message GetActiveUsersStatsResponse {
  repeated ActiveUsersDataPoint data_points = 1;
}

message ActiveUsersDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  int32 daily_active_users = 2;
  int32 weekly_active_users = 3;
  int32 monthly_active_users = 4;
}

// Report Messages
message GenerateReportRequest {
  ReportType report_type = 1;
  Direction direction = 2;
  Level level = 3;
  TimestampRange time_range = 4;
  int64 user_id = 5; // Optional, for user-specific reports
  int64 test_id = 6; // Optional, for test-specific reports
}

message GenerateReportResponse {
  int64 report_id = 1;
  string report_url = 2;
  ReportType report_type = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp expires_at = 5;
}

message ListReportsRequest {
  Pagination pagination = 1;
  ReportType report_type = 2;
  int64 user_id = 3; // Optional, for user-specific reports
}

message ListReportsResponse {
  repeated ReportSummary reports = 1;
  string next_page_token = 2;
}

message ReportSummary {
  int64 report_id = 1;
  string report_name = 2;
  ReportType report_type = 3;
  google.protobuf.Timestamp created_at = 4;
  string report_url = 5;
}

message GetReportRequest {
  int64 report_id = 1;
}

message GetReportResponse {
  int64 report_id = 1;
  string report_name = 2;
  ReportType report_type = 3;
  google.protobuf.Timestamp created_at = 4;
  bytes report_data = 5; // PDF or JSON data
  string report_format = 6; // "PDF", "JSON", etc.
}

// Learning Recommendations Messages
message GetLearningPathRecommendationsRequest {
  int64 user_id = 1;
  Direction direction = 2;
  Level level = 3;
}

message GetLearningPathRecommendationsResponse {
  repeated LearningPathStep recommended_path = 1;
  string explanation = 2;
}

message LearningPathStep {
  int32 step_number = 1;
  string topic = 2;
  string description = 3;
  repeated int64 recommended_test_ids = 4;
  repeated string resources = 5; // Additional learning resources
}

message GetTestRecommendationsRequest {
  int64 user_id = 1;
  Direction direction = 2;
  Level level = 3;
  int32 max_recommendations = 4;
}

message GetTestRecommendationsResponse {
  repeated TestRecommendation recommendations = 1;
}

message TestRecommendation {
  int64 test_id = 1;
  string test_name = 2;
  double relevance_score = 3; // How relevant this test is for the user's growth
  string recommendation_reason = 4; // Why this test was recommended
}