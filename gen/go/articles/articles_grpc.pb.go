// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: articles/articles.proto

package articlesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticlesService_CreateRssSource_FullMethodName        = "/articles.v1.ArticlesService/CreateRssSource"
	ArticlesService_GetRssSources_FullMethodName          = "/articles.v1.ArticlesService/GetRssSources"
	ArticlesService_UpdateRssSource_FullMethodName        = "/articles.v1.ArticlesService/UpdateRssSource"
	ArticlesService_DeleteRssSource_FullMethodName        = "/articles.v1.ArticlesService/DeleteRssSource"
	ArticlesService_ParseRssSource_FullMethodName         = "/articles.v1.ArticlesService/ParseRssSource"
	ArticlesService_CreateTechnology_FullMethodName       = "/articles.v1.ArticlesService/CreateTechnology"
	ArticlesService_GetTechnologies_FullMethodName        = "/articles.v1.ArticlesService/GetTechnologies"
	ArticlesService_UpdateTechnology_FullMethodName       = "/articles.v1.ArticlesService/UpdateTechnology"
	ArticlesService_DeleteTechnology_FullMethodName       = "/articles.v1.ArticlesService/DeleteTechnology"
	ArticlesService_UpdateUserPreferences_FullMethodName  = "/articles.v1.ArticlesService/UpdateUserPreferences"
	ArticlesService_GetUserPreferences_FullMethodName     = "/articles.v1.ArticlesService/GetUserPreferences"
	ArticlesService_GetArticles_FullMethodName            = "/articles.v1.ArticlesService/GetArticles"
	ArticlesService_GetArticle_FullMethodName             = "/articles.v1.ArticlesService/GetArticle"
	ArticlesService_GetRecommendedArticles_FullMethodName = "/articles.v1.ArticlesService/GetRecommendedArticles"
	ArticlesService_SearchArticles_FullMethodName         = "/articles.v1.ArticlesService/SearchArticles"
	ArticlesService_MarkArticleAsRead_FullMethodName      = "/articles.v1.ArticlesService/MarkArticleAsRead"
	ArticlesService_GetUserReadingHistory_FullMethodName  = "/articles.v1.ArticlesService/GetUserReadingHistory"
	ArticlesService_TriggerArticleParsing_FullMethodName  = "/articles.v1.ArticlesService/TriggerArticleParsing"
	ArticlesService_GetParsingStats_FullMethodName        = "/articles.v1.ArticlesService/GetParsingStats"
)

// ArticlesServiceClient is the client API for ArticlesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlesServiceClient interface {
	CreateRssSource(ctx context.Context, in *CreateRssSourceRequest, opts ...grpc.CallOption) (*CreateRssSourceResponse, error)
	GetRssSources(ctx context.Context, in *GetRssSourcesRequest, opts ...grpc.CallOption) (*GetRssSourcesResponse, error)
	UpdateRssSource(ctx context.Context, in *UpdateRssSourceRequest, opts ...grpc.CallOption) (*UpdateRssSourceResponse, error)
	DeleteRssSource(ctx context.Context, in *DeleteRssSourceRequest, opts ...grpc.CallOption) (*DeleteRssSourceResponse, error)
	ParseRssSource(ctx context.Context, in *ParseRssSourceRequest, opts ...grpc.CallOption) (*ParseRssSourceResponse, error)
	CreateTechnology(ctx context.Context, in *CreateTechnologyRequest, opts ...grpc.CallOption) (*CreateTechnologyResponse, error)
	GetTechnologies(ctx context.Context, in *GetTechnologiesRequest, opts ...grpc.CallOption) (*GetTechnologiesResponse, error)
	UpdateTechnology(ctx context.Context, in *UpdateTechnologyRequest, opts ...grpc.CallOption) (*UpdateTechnologyResponse, error)
	DeleteTechnology(ctx context.Context, in *DeleteTechnologyRequest, opts ...grpc.CallOption) (*DeleteTechnologyResponse, error)
	UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error)
	GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error)
	GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error)
	GetRecommendedArticles(ctx context.Context, in *GetRecommendedArticlesRequest, opts ...grpc.CallOption) (*GetRecommendedArticlesResponse, error)
	SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error)
	MarkArticleAsRead(ctx context.Context, in *MarkArticleAsReadRequest, opts ...grpc.CallOption) (*MarkArticleAsReadResponse, error)
	GetUserReadingHistory(ctx context.Context, in *GetUserReadingHistoryRequest, opts ...grpc.CallOption) (*GetUserReadingHistoryResponse, error)
	TriggerArticleParsing(ctx context.Context, in *TriggerArticleParsingRequest, opts ...grpc.CallOption) (*TriggerArticleParsingResponse, error)
	GetParsingStats(ctx context.Context, in *GetParsingStatsRequest, opts ...grpc.CallOption) (*GetParsingStatsResponse, error)
}

type articlesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesServiceClient(cc grpc.ClientConnInterface) ArticlesServiceClient {
	return &articlesServiceClient{cc}
}

func (c *articlesServiceClient) CreateRssSource(ctx context.Context, in *CreateRssSourceRequest, opts ...grpc.CallOption) (*CreateRssSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRssSourceResponse)
	err := c.cc.Invoke(ctx, ArticlesService_CreateRssSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetRssSources(ctx context.Context, in *GetRssSourcesRequest, opts ...grpc.CallOption) (*GetRssSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRssSourcesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetRssSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) UpdateRssSource(ctx context.Context, in *UpdateRssSourceRequest, opts ...grpc.CallOption) (*UpdateRssSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRssSourceResponse)
	err := c.cc.Invoke(ctx, ArticlesService_UpdateRssSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) DeleteRssSource(ctx context.Context, in *DeleteRssSourceRequest, opts ...grpc.CallOption) (*DeleteRssSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRssSourceResponse)
	err := c.cc.Invoke(ctx, ArticlesService_DeleteRssSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) ParseRssSource(ctx context.Context, in *ParseRssSourceRequest, opts ...grpc.CallOption) (*ParseRssSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseRssSourceResponse)
	err := c.cc.Invoke(ctx, ArticlesService_ParseRssSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) CreateTechnology(ctx context.Context, in *CreateTechnologyRequest, opts ...grpc.CallOption) (*CreateTechnologyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTechnologyResponse)
	err := c.cc.Invoke(ctx, ArticlesService_CreateTechnology_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetTechnologies(ctx context.Context, in *GetTechnologiesRequest, opts ...grpc.CallOption) (*GetTechnologiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTechnologiesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetTechnologies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) UpdateTechnology(ctx context.Context, in *UpdateTechnologyRequest, opts ...grpc.CallOption) (*UpdateTechnologyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTechnologyResponse)
	err := c.cc.Invoke(ctx, ArticlesService_UpdateTechnology_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) DeleteTechnology(ctx context.Context, in *DeleteTechnologyRequest, opts ...grpc.CallOption) (*DeleteTechnologyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTechnologyResponse)
	err := c.cc.Invoke(ctx, ArticlesService_DeleteTechnology_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPreferencesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_UpdateUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPreferencesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetRecommendedArticles(ctx context.Context, in *GetRecommendedArticlesRequest, opts ...grpc.CallOption) (*GetRecommendedArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendedArticlesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetRecommendedArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchArticlesResponse)
	err := c.cc.Invoke(ctx, ArticlesService_SearchArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) MarkArticleAsRead(ctx context.Context, in *MarkArticleAsReadRequest, opts ...grpc.CallOption) (*MarkArticleAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkArticleAsReadResponse)
	err := c.cc.Invoke(ctx, ArticlesService_MarkArticleAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetUserReadingHistory(ctx context.Context, in *GetUserReadingHistoryRequest, opts ...grpc.CallOption) (*GetUserReadingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReadingHistoryResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetUserReadingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) TriggerArticleParsing(ctx context.Context, in *TriggerArticleParsingRequest, opts ...grpc.CallOption) (*TriggerArticleParsingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerArticleParsingResponse)
	err := c.cc.Invoke(ctx, ArticlesService_TriggerArticleParsing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetParsingStats(ctx context.Context, in *GetParsingStatsRequest, opts ...grpc.CallOption) (*GetParsingStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParsingStatsResponse)
	err := c.cc.Invoke(ctx, ArticlesService_GetParsingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesServiceServer is the server API for ArticlesService service.
// All implementations must embed UnimplementedArticlesServiceServer
// for forward compatibility.
type ArticlesServiceServer interface {
	CreateRssSource(context.Context, *CreateRssSourceRequest) (*CreateRssSourceResponse, error)
	GetRssSources(context.Context, *GetRssSourcesRequest) (*GetRssSourcesResponse, error)
	UpdateRssSource(context.Context, *UpdateRssSourceRequest) (*UpdateRssSourceResponse, error)
	DeleteRssSource(context.Context, *DeleteRssSourceRequest) (*DeleteRssSourceResponse, error)
	ParseRssSource(context.Context, *ParseRssSourceRequest) (*ParseRssSourceResponse, error)
	CreateTechnology(context.Context, *CreateTechnologyRequest) (*CreateTechnologyResponse, error)
	GetTechnologies(context.Context, *GetTechnologiesRequest) (*GetTechnologiesResponse, error)
	UpdateTechnology(context.Context, *UpdateTechnologyRequest) (*UpdateTechnologyResponse, error)
	DeleteTechnology(context.Context, *DeleteTechnologyRequest) (*DeleteTechnologyResponse, error)
	UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error)
	GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error)
	GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error)
	GetRecommendedArticles(context.Context, *GetRecommendedArticlesRequest) (*GetRecommendedArticlesResponse, error)
	SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error)
	MarkArticleAsRead(context.Context, *MarkArticleAsReadRequest) (*MarkArticleAsReadResponse, error)
	GetUserReadingHistory(context.Context, *GetUserReadingHistoryRequest) (*GetUserReadingHistoryResponse, error)
	TriggerArticleParsing(context.Context, *TriggerArticleParsingRequest) (*TriggerArticleParsingResponse, error)
	GetParsingStats(context.Context, *GetParsingStatsRequest) (*GetParsingStatsResponse, error)
	mustEmbedUnimplementedArticlesServiceServer()
}

// UnimplementedArticlesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticlesServiceServer struct{}

func (UnimplementedArticlesServiceServer) CreateRssSource(context.Context, *CreateRssSourceRequest) (*CreateRssSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRssSource not implemented")
}
func (UnimplementedArticlesServiceServer) GetRssSources(context.Context, *GetRssSourcesRequest) (*GetRssSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRssSources not implemented")
}
func (UnimplementedArticlesServiceServer) UpdateRssSource(context.Context, *UpdateRssSourceRequest) (*UpdateRssSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRssSource not implemented")
}
func (UnimplementedArticlesServiceServer) DeleteRssSource(context.Context, *DeleteRssSourceRequest) (*DeleteRssSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRssSource not implemented")
}
func (UnimplementedArticlesServiceServer) ParseRssSource(context.Context, *ParseRssSourceRequest) (*ParseRssSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseRssSource not implemented")
}
func (UnimplementedArticlesServiceServer) CreateTechnology(context.Context, *CreateTechnologyRequest) (*CreateTechnologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTechnology not implemented")
}
func (UnimplementedArticlesServiceServer) GetTechnologies(context.Context, *GetTechnologiesRequest) (*GetTechnologiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTechnologies not implemented")
}
func (UnimplementedArticlesServiceServer) UpdateTechnology(context.Context, *UpdateTechnologyRequest) (*UpdateTechnologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTechnology not implemented")
}
func (UnimplementedArticlesServiceServer) DeleteTechnology(context.Context, *DeleteTechnologyRequest) (*DeleteTechnologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTechnology not implemented")
}
func (UnimplementedArticlesServiceServer) UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPreferences not implemented")
}
func (UnimplementedArticlesServiceServer) GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedArticlesServiceServer) GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticlesServiceServer) GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticlesServiceServer) GetRecommendedArticles(context.Context, *GetRecommendedArticlesRequest) (*GetRecommendedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedArticles not implemented")
}
func (UnimplementedArticlesServiceServer) SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticles not implemented")
}
func (UnimplementedArticlesServiceServer) MarkArticleAsRead(context.Context, *MarkArticleAsReadRequest) (*MarkArticleAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkArticleAsRead not implemented")
}
func (UnimplementedArticlesServiceServer) GetUserReadingHistory(context.Context, *GetUserReadingHistoryRequest) (*GetUserReadingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReadingHistory not implemented")
}
func (UnimplementedArticlesServiceServer) TriggerArticleParsing(context.Context, *TriggerArticleParsingRequest) (*TriggerArticleParsingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerArticleParsing not implemented")
}
func (UnimplementedArticlesServiceServer) GetParsingStats(context.Context, *GetParsingStatsRequest) (*GetParsingStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsingStats not implemented")
}
func (UnimplementedArticlesServiceServer) mustEmbedUnimplementedArticlesServiceServer() {}
func (UnimplementedArticlesServiceServer) testEmbeddedByValue()                         {}

// UnsafeArticlesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesServiceServer will
// result in compilation errors.
type UnsafeArticlesServiceServer interface {
	mustEmbedUnimplementedArticlesServiceServer()
}

func RegisterArticlesServiceServer(s grpc.ServiceRegistrar, srv ArticlesServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticlesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticlesService_ServiceDesc, srv)
}

func _ArticlesService_CreateRssSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRssSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).CreateRssSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_CreateRssSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).CreateRssSource(ctx, req.(*CreateRssSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetRssSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRssSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetRssSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetRssSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetRssSources(ctx, req.(*GetRssSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_UpdateRssSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRssSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).UpdateRssSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_UpdateRssSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).UpdateRssSource(ctx, req.(*UpdateRssSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_DeleteRssSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRssSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).DeleteRssSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_DeleteRssSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).DeleteRssSource(ctx, req.(*DeleteRssSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_ParseRssSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRssSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).ParseRssSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_ParseRssSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).ParseRssSource(ctx, req.(*ParseRssSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_CreateTechnology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTechnologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).CreateTechnology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_CreateTechnology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).CreateTechnology(ctx, req.(*CreateTechnologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetTechnologies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTechnologiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetTechnologies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetTechnologies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetTechnologies(ctx, req.(*GetTechnologiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_UpdateTechnology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTechnologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).UpdateTechnology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_UpdateTechnology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).UpdateTechnology(ctx, req.(*UpdateTechnologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_DeleteTechnology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTechnologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).DeleteTechnology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_DeleteTechnology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).DeleteTechnology(ctx, req.(*DeleteTechnologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_UpdateUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).UpdateUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_UpdateUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).UpdateUserPreferences(ctx, req.(*UpdateUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetUserPreferences(ctx, req.(*GetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetArticles(ctx, req.(*GetArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetRecommendedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetRecommendedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetRecommendedArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetRecommendedArticles(ctx, req.(*GetRecommendedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_SearchArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).SearchArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_SearchArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).SearchArticles(ctx, req.(*SearchArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_MarkArticleAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkArticleAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).MarkArticleAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_MarkArticleAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).MarkArticleAsRead(ctx, req.(*MarkArticleAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetUserReadingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReadingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetUserReadingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetUserReadingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetUserReadingHistory(ctx, req.(*GetUserReadingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_TriggerArticleParsing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerArticleParsingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).TriggerArticleParsing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_TriggerArticleParsing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).TriggerArticleParsing(ctx, req.(*TriggerArticleParsingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetParsingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParsingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetParsingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetParsingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetParsingStats(ctx, req.(*GetParsingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticlesService_ServiceDesc is the grpc.ServiceDesc for ArticlesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticlesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articles.v1.ArticlesService",
	HandlerType: (*ArticlesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRssSource",
			Handler:    _ArticlesService_CreateRssSource_Handler,
		},
		{
			MethodName: "GetRssSources",
			Handler:    _ArticlesService_GetRssSources_Handler,
		},
		{
			MethodName: "UpdateRssSource",
			Handler:    _ArticlesService_UpdateRssSource_Handler,
		},
		{
			MethodName: "DeleteRssSource",
			Handler:    _ArticlesService_DeleteRssSource_Handler,
		},
		{
			MethodName: "ParseRssSource",
			Handler:    _ArticlesService_ParseRssSource_Handler,
		},
		{
			MethodName: "CreateTechnology",
			Handler:    _ArticlesService_CreateTechnology_Handler,
		},
		{
			MethodName: "GetTechnologies",
			Handler:    _ArticlesService_GetTechnologies_Handler,
		},
		{
			MethodName: "UpdateTechnology",
			Handler:    _ArticlesService_UpdateTechnology_Handler,
		},
		{
			MethodName: "DeleteTechnology",
			Handler:    _ArticlesService_DeleteTechnology_Handler,
		},
		{
			MethodName: "UpdateUserPreferences",
			Handler:    _ArticlesService_UpdateUserPreferences_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _ArticlesService_GetUserPreferences_Handler,
		},
		{
			MethodName: "GetArticles",
			Handler:    _ArticlesService_GetArticles_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticlesService_GetArticle_Handler,
		},
		{
			MethodName: "GetRecommendedArticles",
			Handler:    _ArticlesService_GetRecommendedArticles_Handler,
		},
		{
			MethodName: "SearchArticles",
			Handler:    _ArticlesService_SearchArticles_Handler,
		},
		{
			MethodName: "MarkArticleAsRead",
			Handler:    _ArticlesService_MarkArticleAsRead_Handler,
		},
		{
			MethodName: "GetUserReadingHistory",
			Handler:    _ArticlesService_GetUserReadingHistory_Handler,
		},
		{
			MethodName: "TriggerArticleParsing",
			Handler:    _ArticlesService_TriggerArticleParsing_Handler,
		},
		{
			MethodName: "GetParsingStats",
			Handler:    _ArticlesService_GetParsingStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "articles/articles.proto",
}
